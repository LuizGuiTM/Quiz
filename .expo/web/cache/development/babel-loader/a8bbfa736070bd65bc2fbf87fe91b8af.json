{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from 'expo-sqlite';\nexport function getDbConnection() {\n  var cx = SQLite.openDatabase('dbContatos.db');\n  return cx;\n}\nexport function createTable() {\n  return _regeneratorRuntime.async(function createTable$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var query = \"CREATE TABLE IF NOT EXISTS tbContatos\\n        (\\n            id text not null primary key,\\n            nome text not null,\\n            telefone text not null          \\n        )\";\n            var dbCx = getDbConnection();\n            dbCx.transaction(function (tx) {\n              tx.executeSql(query, [], function (tx, resultado) {\n                return resolve(true);\n              });\n            }, function (error) {\n              console.log(error);\n              resolve(false);\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n;\nexport function obtemTodosContatos() {\n  return new Promise(function (resolve, reject) {\n    var dbCx = getDbConnection();\n    dbCx.transaction(function (tx) {\n      var query = 'select * from tbContatos';\n      tx.executeSql(query, [], function (tx, registros) {\n        var retorno = [];\n\n        for (var n = 0; n < registros.rows.length; n++) {\n          var obj = {\n            id: registros.rows.item(n).id,\n            nome: registros.rows.item(n).nome,\n            telefone: registros.rows.item(n).telefone\n          };\n          retorno.push(obj);\n        }\n\n        resolve(retorno);\n      });\n    }, function (error) {\n      console.log(error);\n      resolve([]);\n    });\n  });\n}\nexport function adicionaContato(contato) {\n  return new Promise(function (resolve, reject) {\n    var query = 'insert into tbContatos (id, nome ,telefone) values (?,?,?)';\n    var dbCx = getDbConnection();\n    dbCx.transaction(function (tx) {\n      tx.executeSql(query, [contato.id, contato.nome, contato.telefone], function (tx, resultado) {\n        resolve(resultado.rowsAffected > 0);\n      });\n    }, function (error) {\n      console.log(error);\n      resolve(false);\n    });\n  });\n}\nexport function alteraContato(contato) {\n  console.log('começando o método alteraContato');\n  return new Promise(function (resolve, reject) {\n    var query = 'update tbContatos set nome=?, telefone=? where id=?';\n    var dbCx = getDbConnection();\n    dbCx.transaction(function (tx) {\n      tx.executeSql(query, [contato.nome, contato.telefone, contato.id], function (tx, resultado) {\n        resolve(resultado.rowsAffected > 0);\n      });\n    }, function (error) {\n      console.log(error);\n      resolve(false);\n    });\n  });\n}\nexport function excluiContato(id) {\n  console.log('Apagando contato ' + id);\n  return new Promise(function (resolve, reject) {\n    var query = 'delete from tbContatos where id=?';\n    var dbCx = getDbConnection();\n    dbCx.transaction(function (tx) {\n      tx.executeSql(query, [id], function (tx, resultado) {\n        resolve(resultado.rowsAffected > 0);\n      });\n    }, function (error) {\n      console.log(error);\n      resolve(false);\n    });\n  });\n}\nexport function excluiTodosContatos() {\n  console.log(\"Apagando todos os contatos...\");\n  return new Promise(function (resolve, reject) {\n    var query = 'delete from tbContatos';\n    var dbCx = getDbConnection();\n    dbCx.transaction(function (tx) {\n      tx.executeSql(query, [], function (tx, resultado) {\n        return resolve(resultado.rowsAffected > 0);\n      });\n    }, function (error) {\n      console.log(error);\n      resolve(false);\n    });\n  });\n}","map":{"version":3,"names":["SQLite","getDbConnection","cx","openDatabase","createTable","Promise","resolve","reject","query","dbCx","transaction","tx","executeSql","resultado","error","console","log","obtemTodosContatos","registros","retorno","n","rows","length","obj","id","item","nome","telefone","push","adicionaContato","contato","rowsAffected","alteraContato","excluiContato","excluiTodosContatos"],"sources":["C:/eduardo/mobile/contatosSQLite-Componente/services/dbservice.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\n\r\nexport function getDbConnection() {\r\n    const cx = SQLite.openDatabase('dbContatos.db');\r\n    return cx;\r\n}\r\n\r\nexport async function createTable() {\r\n    return new Promise((resolve, reject) => {\r\n        const query = `CREATE TABLE IF NOT EXISTS tbContatos\r\n        (\r\n            id text not null primary key,\r\n            nome text not null,\r\n            telefone text not null          \r\n        )`;\r\n\r\n        let dbCx = getDbConnection();\r\n        dbCx.transaction(tx => {\r\n            tx.executeSql(\r\n                query, [],\r\n                (tx, resultado) => resolve(true)\r\n            )\r\n        },\r\n            error => {\r\n                console.log(error);\r\n                resolve(false);\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nexport function obtemTodosContatos() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let dbCx = getDbConnection();\r\n        dbCx.transaction(tx => {\r\n            let query = 'select * from tbContatos';\r\n            tx.executeSql(query, [],\r\n                (tx, registros) => {\r\n\r\n                    var retorno = []\r\n\r\n                    for (let n = 0; n < registros.rows.length; n++) {\r\n                        let obj = {\r\n                            id: registros.rows.item(n).id,\r\n                            nome: registros.rows.item(n).nome,\r\n                            telefone: registros.rows.item(n).telefone\r\n                        }\r\n                        retorno.push(obj);\r\n                    }\r\n                    resolve(retorno);\r\n                })\r\n        },\r\n            error => {\r\n                console.log(error);\r\n                resolve([]);\r\n            }\r\n        )\r\n    }\r\n    );\r\n}\r\n\r\nexport function adicionaContato(contato) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let query = 'insert into tbContatos (id, nome ,telefone) values (?,?,?)';\r\n        let dbCx = getDbConnection();\r\n\r\n        dbCx.transaction(tx => {\r\n            tx.executeSql(query, [contato.id, contato.nome, contato.telefone],\r\n                (tx, resultado) => {\r\n                    resolve(resultado.rowsAffected > 0);\r\n                })\r\n        },\r\n            error => {\r\n                console.log(error);\r\n                resolve(false);\r\n            }\r\n        )\r\n    }\r\n    );\r\n}\r\n\r\n\r\nexport function alteraContato(contato) {\r\n    console.log('começando o método alteraContato');\r\n    return new Promise((resolve, reject) => {\r\n        let query = 'update tbContatos set nome=?, telefone=? where id=?';\r\n        let dbCx = getDbConnection();\r\n\r\n        dbCx.transaction(tx => {\r\n            tx.executeSql(query, [contato.nome, contato.telefone, contato.id],\r\n                (tx, resultado) => {\r\n                    resolve(resultado.rowsAffected > 0);\r\n                })\r\n        },\r\n            error => {\r\n                console.log(error);\r\n                resolve(false);\r\n            }\r\n        )\r\n    }\r\n    );\r\n}\r\n\r\n\r\n\r\nexport function excluiContato(id) {\r\n    console.log('Apagando contato ' + id);\r\n    return new Promise((resolve, reject) => {\r\n        let query = 'delete from tbContatos where id=?';\r\n        let dbCx = getDbConnection();\r\n\r\n        dbCx.transaction(tx => {\r\n            tx.executeSql(query, [id],\r\n                (tx, resultado) => {\r\n                    resolve(resultado.rowsAffected > 0);\r\n                })\r\n        },\r\n            error => {\r\n                console.log(error);\r\n                resolve(false);\r\n            }\r\n        )\r\n    }\r\n    );\r\n}\r\n\r\n\r\nexport function excluiTodosContatos() {\r\n    console.log(\"Apagando todos os contatos...\");\r\n    return new Promise((resolve, reject) => {\r\n        let query = 'delete from tbContatos';\r\n        let dbCx = getDbConnection();\r\n        dbCx.transaction(tx => {\r\n            tx.executeSql(query, [],\r\n                (tx, resultado) => resolve(resultado.rowsAffected > 0)\r\n            );\r\n        },\r\n            error => {\r\n                console.log(error);\r\n                resolve(false);\r\n            }\r\n        );\r\n    }\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}